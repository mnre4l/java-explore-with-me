{
	"info": {
		"_postman_id": "2ed3eb85-7198-47f1-8ff5-fd24f6f5746e",
		"name": "feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28924003"
	},
	"item": [
		{
			"name": "Создание инициатора ивента",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код 201 и данные в формате json\", function() {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"let body = pm.response.json();\r",
							"\r",
							"pm.collectionVariables.set(\"initiatorId\", body.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"eventowner@email.ru\",\r\n    \"name\": \"eventowner\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/admin/users",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Создание комментатора",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код 201 и данные в формате json\", function() {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"let body = pm.response.json();\r",
							"\r",
							"pm.collectionVariables.set(\"commentatorId\", body.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"commentator@email.ru\",\r\n    \"name\": \"commentator\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/admin/users",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Создание категории",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let body = pm.response.json();\r",
							"\r",
							"pm.collectionVariables.set(\"catId\", body.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"категория\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/admin/categories",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "Создание ивента",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let body = pm.response.json();\r",
							"\r",
							"pm.collectionVariables.set(\"eventId\", body.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"annotation\": \"Аннотируем проверку комментариев\",\r\n    \"category\": {{catId}},\r\n    \"description\": \"Описываем как проверим комментарии\",\r\n    \"eventDate\": \"2025-12-15 00:00:00\",\r\n    \"id\": 1,\r\n    \"initiator\": {\r\n        \"email\": \"Darian_Hickle25@yahoo.com\",\r\n        \"name\": \"Douglas Hahn\"\r\n    },\r\n    \"location\": {\r\n        \"lat\": -4.1205,\r\n        \"lon\": 174.4508\r\n    },\r\n    \"paid\": false,\r\n    \"participantLimit\": 451,\r\n    \"requestModeration\": true,\r\n    \"title\": \"Назваие ивента для проверки комментариев\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/users/:userId/events",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						":userId",
						"events"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{initiatorId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Публикация ивента",
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/admin/events/:eventId",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "{{eventId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Создание комментария",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код 201 и данные в формате json\", function() {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"let target = pm.response.json();\r",
							"\r",
							"pm.test(\"Ответ должен содержать дату создания комментария, текст комментария, автора, id ивента, id\", function() {\r",
							"    pm.expect(target).to.have.property('id');\r",
							"    pm.expect(target).to.have.property('eventId');\r",
							"    pm.expect(target).to.have.property('createdAt');\r",
							"    pm.expect(target).to.have.property('authorLogin');\r",
							"    pm.expect(target).to.have.property('text');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.createdAt).to.not.be.null;\r",
							"    pm.expect(target.text).equal('комментирую', 'Название события должно соответствовать названию события в запросе');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"комментирую\",\r\n    \"eventId\": {{eventId}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/users/:userId/events/comments",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						":userId",
						"events",
						"comments"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{commentatorId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение комментариев к ивенту",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"let body = pm.response.json();\r",
							"\r",
							"pm.test(\"Ответ должен быть массивом\", pm.expect(body).is.an('array'));\r",
							"\r",
							"let target = body[0];\r",
							"\r",
							"pm.test(\"Данные в запросе должны соответствовать ожидаемым\", function () {\r",
							"    pm.expect(target).to.have.property('id');\r",
							"    pm.expect(target).to.have.property('eventId');\r",
							"    pm.expect(target).to.have.property('createdAt');\r",
							"    pm.expect(target).to.have.property('authorLogin');\r",
							"    pm.expect(target).to.have.property('text');\r",
							"        pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.createdAt).to.not.be.null;\r",
							"    pm.expect(target.text).equal('комментирую', 'Название события должно соответствовать названию события в запросе');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/events/:id/comments",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"events",
						":id",
						"comments"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{eventId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "initiatorId",
			"value": "-1",
			"type": "string"
		},
		{
			"key": "commentatorId",
			"value": "-1",
			"type": "string"
		},
		{
			"key": "catId",
			"value": "-1",
			"type": "string"
		},
		{
			"key": "eventId",
			"value": "-1",
			"type": "string"
		},
		{
			"key": "commantatorId",
			"value": ""
		}
	]
}